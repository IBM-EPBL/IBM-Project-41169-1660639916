import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from keras.models import Model,Sequential
from keras.layers import LSTM, Activation, Dense, Dropout, Input, Embedding
from keras.optimizers import Adam
from keras.preprocessing.text import Tokenizer
from keras.preprocessing import sequence
from keras.utils import pad_sequences
from keras.utils import to_categorical
from keras.callbacks import EarlyStopping
%matplotlib inline
from google.colab import drive
drive.mount('/content/drive')
Mounted at /content/drive
Reading the dataset

df = pd.read_csv('/content/drive/MyDrive/spam.csv',encoding='latin-1')
df.head()
v1	v2	Unnamed: 2	Unnamed: 3	Unnamed: 4
0	ham	Go until jurong point, crazy.. Available only ...	NaN	NaN	NaN
1	ham	Ok lar... Joking wif u oni...	NaN	NaN	NaN
2	spam	Free entry in 2 a wkly comp to win FA Cup fina...	NaN	NaN	NaN
3	ham	U dun say so early hor... U c already then say...	NaN	NaN	NaN
4	ham	Nah I don't think he goes to usf, he lives aro...	NaN	NaN	NaN
df.drop(['Unnamed: 2', 'Unnamed: 3', 'Unnamed: 4'],axis=1,inplace=True)
df.info()
RangeIndex: 5572 entries, 0 to 5571
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype 
---  ------  --------------  ----- 
 0   v1      5572 non-null   object
 1   v2      5572 non-null   object
dtypes: object(2)
memory usage: 87.2+ KB
sns.countplot(df.v1)
plt.xlabel('Label')
plt.title('Number of ham and spam messages')
/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.
  FutureWarning
Text(0.5, 1.0, 'Number of ham and spam messages')

X = df.v2
Y = df.v1
le = LabelEncoder()
Y = le.fit_transform(Y)
Y = Y.reshape(-1,1)
X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.15)
Process the data

max_words = 1000
max_len = 150
tok = Tokenizer(num_words=max_words)
tok.fit_on_texts(X_train)
sequences = tok.texts_to_sequences(X_train)
sequences_matrix = pad_sequences(sequences,maxlen=max_len)
sequences_matrix
array([[  0,   0,   0, ..., 841,  17, 428],
       [  0,   0,   0, ..., 370,  12,  14],
       [  0,   0,   0, ...,  39,  38,  32],
       ...,
       [  0,   0,   0, ...,  13, 608, 180],
       [  0,   0,   0, ...,  20,   6, 204],
       [  0,   0,   0, ...,  18,   5, 144]], dtype=int32)
tok.index_word
{1: 'i',
 2: 'to',
 3: 'you',
 4: 'a',
 5: 'the',
 6: 'u',
 7: 'and',
 8: 'in',
 9: 'is',
 10: 'me',
 11: 'my',
 12: 'for',
 13: 'your',
 14: 'it',
 15: 'of',
 16: 'call',
 17: 'have',
 18: 'on',
 19: 'that',
 20: '2',
 21: 'are',
 22: 'now',
 23: 'so',
 24: 'not',
 25: 'but',
 26: 'or',
 27: 'at',
 28: 'can',
 29: 'do',
 30: 'with',
 31: 'be',
 32: 'get',
 33: 'if',
 34: 'just',
 35: "i'm",
 36: 'no',
 37: 'ur',
 38: 'will',
 39: 'we',
 40: 'gt',
 41: 'lt',
TOT_SIZE = len(tok.word_index)+1
lstm_model = Sequential()
lstm_model.add(Embedding(TOT_SIZE, 32, input_length=max_len))
lstm_model.add(LSTM(100))
lstm_model.add(Dropout(0.4))
lstm_model.add(Dense(20, activation="relu"))
lstm_model.add(Dropout(0.3))
lstm_model.add(Dense(1, activation = "sigmoid"))
Compile the model

lstm_model.compile(loss = "binary_crossentropy", optimizer = "adam", metrics = ["accuracy"])
lstm_model.summary()
Model: "sequential"
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 embedding (Embedding)       (None, 150, 32)           263648    
                                                                 
 lstm (LSTM)                 (None, 100)               53200     
                                                                 
 dropout (Dropout)           (None, 100)               0         
                                                                 
 dense (Dense)               (None, 20)                2020      
                                                                 
 dropout_1 (Dropout)         (None, 20)                0         
                                                                 
 dense_1 (Dense)             (None, 1)                 21        
                                                                 
=================================================================
Total params: 318,889
Trainable params: 318,889
Non-trainable params: 0
_________________________________________________________________
Fit the model

lstm_model.fit(sequences_matrix,Y_train,batch_size=128,epochs=10,
          validation_split=0.2,
          workers=10,
           callbacks=[EarlyStopping(monitor='val_loss',min_delta=0.0001)])
Epoch 1/10
30/30 [==============================] - 14s 379ms/step - loss: 0.4631 - accuracy: 0.8524 - val_loss: 0.3151 - val_accuracy: 0.8650
Epoch 2/10
30/30 [==============================] - 11s 359ms/step - loss: 0.2174 - accuracy: 0.9311 - val_loss: 0.1200 - val_accuracy: 0.9705
Save the model

lstm_model.save('sms.h5')
Test the model

test_sequences = tok.texts_to_sequences(X_test)
test_sequences_matrix = pad_sequences(test_sequences,maxlen=max_len)
acc = lstm_model.evaluate(test_sequences_matrix,Y_test)
27/27 [==============================] - 1s 36ms/step - loss: 0.1192 - accuracy: 0.9749
print('Test set\n  Loss: {:0.3f}\n  Accuracy: {:0.3f}'.format(acc[0],acc[1]))
Test set
  Loss: 0.119
  Accuracy: 0.975